<?php

/**
 * @file
 * Contains spacebase_core.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;


/**
 * Implements hook_help().
 */
function spacebase_core_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the spacebase_core module.
    case 'help.page.spacebase_core':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Core custom functionality for spacebase website') . '</p>';
      return $output;

    default:
  }
}


/** Implements hook_preprocess_group() on behalf of spacebase_core.module.
 *
 * Prepare theme variables to show links/buttons to join, leave, or create
 * content for groups, or edit groups. A .show boolean and .url
 * Leaves developing link text and classes to theme/twig.
 * Based on both permissions and membership status (can't join a group
 * you already joined) set variables and make url's available to theme.
 */
function spacebase_preprocess_group(&$variables) {
  // I believe this will follow the same cache rules as
  // groups, if I don't change the cache rules here.
  // @ToDo: test

  $group = $variables['group'];
  $account = \Drupal::currentUser(); //or $variables['user']; ?
  // Note: if users can administer a group, all permissions are true.

  /** Thoughts on code duplication:
   * Much of this code copied from group module operations link code,
   * which doesn't seem cleanly reusable, in:
   * modules/gnode/src/Plugin/GroupContentEnabler/GroupNode.php
   * src/Plugin/GroupContentEnabler/GroupMembership.php
   * It's likely that this should be turned into a function and moved from
   * this preprocess, but not sure yet. Groups module might benefit
   * from a more generalized approach that writes the operations links
   * based on whether a link should show (reusable), instead of the other
   * way around... think about long-term.
   */  

  // Users can only ever one of join or leave:
  if ($group->getMember($account)) {
    // Edit the group overall
    // /group/x/edit
    if ($group->hasPermission('edit group', $account)) {
      // @ToDo, done it two different ways, ask themer which approach...
      /*
      $variables['group_edit']['show'] = true;
      $variables['group_edit']['url'] =
        $group->toUrl('edit-form'); // need any $url_options ?
       */
      $variables['group_links']['group_edit'] = '/group/' . $group->id() . '/edit';
    }
    if ($group->hasPermission('administer members', $account)) {
      $variables['group_links']['group_manage_members'] = '/group/' . $group->id() . '/members';
    }


    if ($group->hasPermission('leave group', $account)) {
      $variables['group_leave']['show'] = true;
      $variables['group_leave']['url'] = 
        new Url('entity.group.leave', ['group' => $group->id()]);
    }
    // Possible futur @ToDo: turn this array if add forums and so on,
    // *and* those are also just permissions based.
    // Links look like:
    // group/20/content/create/group_node%3Aresources
    $plugin_id = 'group_node:resources';
    $quick_id = 'resources';
    if ($group->hasPermission("create $plugin_id entity", $account)) {
      $variables['group_create_'. $quick_id]['show'] = true;
      $route_params = ['group' => $group->id(), 'plugin_id' => $plugin_id];
      $variables['group_create_'. $quick_id]['url'] =
        new Url('entity.group_content.create_form', $route_params);
    }
  } elseif ($group->hasPermission('join group', $account)) {
      $variables['group_join']['show'] = true;
      $variables['group_join']['url'] = new Url('entity.group.join', ['group' => $group->id()]);
  }

  // get resource_type terms
  $vid = 'resource_type';
  $terms =
    \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid);
  foreach ($terms as $term) {
    $variables['resource_type'][] = $term->name;
  }
}


/**
 * Implements hook_form_alter() on behalf of spacebase_core.module.
 */
function spacebase_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'user_register_form') {
    $form['actions']['submit']['#submit'][] = 'spacebase_core_user_registration_submit';
  }
  else if ($form['#id'] == 'views-exposed-form-sitewide-search-search') {
    $form['keywords']['#attributes']['placeholder'] = 'Search';
    $form['#action'] = '/search';
  }
}

function spacebase_core_user_registration_submit(&$form, FormStateInterface $form_state) {
  drupal_set_message("An email will be sent to you with instructions to verify your email address and complete the sign-up process.");
  $url = url::fromUserInput("/user/login");
  $form_state->setRedirectUrl($url);
}

function spacebase_core_theme($existing, $type, $theme, $path) {
  return [
    'sb_search_page' => [
      'variables' => [
        'keywords' => '',
        'fullpage' => '',
        'orgs' => '',
        'org_count' => '',
        'people' => '',
        'people_count' => '',
      ],
    ],
  ];
}
