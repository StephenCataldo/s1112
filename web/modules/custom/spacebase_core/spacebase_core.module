<?php

/**
 * @file
 * Contains spacebase_core.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\views\Views;


/**
 * Implements hook_help().
 */
function spacebase_core_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the spacebase_core module.
    case 'help.page.spacebase_core':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Core custom functionality for spacebase website') . '</p>';
      return $output;

    default:
  }
}



 
/** Implements hook_preprocess_node
 *
 * Link Forum nodes back to their Organization
 * (This could also go in theme if preferred)
 */

use Drupal\group\Entity\GroupContent;
function spacebase_core_preprocess_node__group_forum_topic(&$variables) {

  // 1. Forum threads should send people back to either the forum or
  // org page, tbd (by theme tempate).
  // 2. Don't show comments form to non-group members
  // Designed loosely with possible multiple group ownership of forums in mind:

  $account = \Drupal::currentUser();
  $show_reply = FALSE;
  $show_pin = FALSE; // #show-pin-access will probably change
  foreach (GroupContent::loadByEntity($variables['node']) as $group_content) {
    $group = $group_content->getGroup();
    $variables['parent_groups'][$group->id()] = $group->label();
    if ($group->hasPermission('create group_node:group_forum_topic entity', $account)) {
      $show_reply = TRUE;
    }
    //@ToDo: this doesn't belong here, does it? Moved to hook_entity_field_access
    if ($group->hasPermission('organization_group-admin[administer group]', $account)) {
      $show_pin = TRUE;
    }
  }
  if (!$show_reply) {
    $variables['content']['field_reply'] = array('#markup'  =>
      t("Join this organization to leave a comment."));
  }
  // #show-pin-access will probably change
  if (!$show_pin) {
    $variables['content']['field_pin_to_top'] = NULL;
  }

}

// @ToDo: these use statements from example, probably not all needed:

// Use statements to support hook_entity_field_access.
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Access\AccessResult;

// Interfaces used by entities to declare "ownership".
use Drupal\user\EntityOwnerInterface;
use Drupal\user\UserInterface;

// Use statements for hook_entity_test_access.
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_entity_field_access().
 *
 * #Pins-field-access - Only group Admins can set the pins
 *
 */

function spacebase_core_entity_field_access($operation, \Drupal\Core\Field\FieldDefinitionInterface $field_definition, \Drupal\Core\Session\AccountInterface $account, \Drupal\Core\Field\FieldItemListInterface $items = NULL) {


  // Caching: unfortunately, group membership means we need to know
  // if this user is an Admin of any groups, user-specific caches/
  // @ToDo: does it matter that we cache all the other fields?
  $result = AccessResult::neutral();
  $result->addCacheContexts(['user']);

  // Edit the pin? Matches ability to edit the group (not the node)
  // Forbid access to this field except for admins
  if ($field_definition->getName() == 'field_pin_to_top') {
    if ($operation == 'edit') {
      // Need the node, to get the group, to see if $account is an Admin
      if ($items) {
        $node = $items->getEntity();

        // Warning: new nodes being created need to use form_alter @ToDo,
        // this function fails to forbid them.
        if ($node->isNew()) {
          // Can't loadByEntity a node in the create-new form.
          // So there's no clean way to know the group
          // ( just $_GET['destination'] = group/$gid )
          return $result;
        }

        foreach (GroupContent::loadByEntity($node) as $group_content) {
          $group = $group_content->getGroup();
          if ($group->hasPermission('organization_group-admin[administer group]', $account)) {
            $result = AccessResult::allowed();
            return $result->addCacheContexts(['user']);
          }
        }
      }
      $result = AccessResult::forbidden();
    }

  }
  return $result;

}

/** Implements hook_preprocess_group() on behalf of spacebase_core.module.
 *
 * Prepare theme variables to show links/buttons to join, leave, or create
 * content for groups, or edit groups. A .show boolean and .url
 * Leaves developing link text and classes to theme/twig.
 * Based on both permissions and membership status (can't join a group
 * you already joined) set variables and make url's available to theme.
 */
function spacebase_core_preprocess_group(&$variables) {
  // I believe this will follow the same cache rules as
  // groups, if I don't change the cache rules here.
  // @ToDo: test

  $group = $variables['group'];
  $account = \Drupal::currentUser(); //or $variables['user']; ?
  // Note: if users can administer a group, all permissions are true.

  /** Thoughts on code duplication:
   
   * The first version of this worked mlore like the group module's operations
   * link code, which unfortunately is written in a way hard to reuse.
   * I think the new way is simpler, and should be the last step for 
   * SpaceBase ... so easier for themers and less extensible.
      $variables['group_leave']['show'] = true;
      $variables['group_leave']['url'] = 
        new Url('entity.group.leave', ['group' => $group->id()]);
       
   * Originally based on:
   * modules/gnode/src/Plugin/GroupContentEnabler/GroupNode.php
   * src/Plugin/GroupContentEnabler/GroupMembership.php
   * It's likely that this might be turned into a function and moved from
   * this preprocess, but not sure yet. Groups module might benefit
   * from a more generalized approach that provides the links so that 
   * they can be grabbed by any function, rather than locked into the
   * operations links function.
   */  

  /** Group tabs need url repeatedly. Just a shortcut */
  $variables['group_url'] = '/group/' . $group->id();


  /** Edit Group, Add Resource can be done by non-member admins.
   * If not, move inside getMember($account)
   */
  // Edit the group overall
  // /group/x/edit
  if ($group->hasPermission('edit group', $account)) {
    $variables['group_links']['group_edit'] = '/group/' . $group->id() . '/edit';
  }
  if ($group->hasPermission('administer members', $account)) {
    // @ToDo: review cache implications
    $variables['group_links']['group_manage_members'] = '/group/' . $group->id() . '/members';
    // If they can administer members, do they have pending applicants?
    $name = 'group_members';
    $display_id = 'page_2';
    $result = views_get_view_result($name, $display_id, $group->id());
    if ( count($result) > 0 ) {
      $variables['group_links']['group_manage_applicants'] =  '/group/' . $group->id() . '/applicants';
    }
  }

  // Links look like:
  // group/20/content/create/group_node%3Aresources
  // group/14/content/create/group_node%3Agroup_forum_topic
  $ids = array('resources', 'group_forum_topic');
  foreach ($ids as $id) {
    $plugin_id = 'group_node:' . $id;

    if ($group->hasPermission("create $plugin_id entity", $account)) {
      $route_params = ['group' => $group->id(), 'plugin_id' => $plugin_id];
      $url = new Url('entity.group_content.create_form', $route_params);
      $variables['group_links']['group_create_'. $id] =
        $url->toString() . '?destination=/group/' . $group->id();
    }
  }

  /* Leave and join depend on membership status AND permission */  
  if ($group->getMember($account)) {

    if ($group->hasPermission('leave group', $account)) {
      $url =new Url('entity.group.leave', ['group' => $group->id()]);
      $variables['group_links']['leave'] = $url->toString();
    }
  } elseif ($group->hasPermission('join group', $account)) {
    $url = new Url('entity.group.join', ['group' => $group->id()]);
    $variables['group_links']['join'] = $url->toString();
  }

  // provide resource_type terms, for tabs in twig
  //$variables['resource_type'][] = _get_resource_type();
  $vid = 'resource_type';
  $terms =
    \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid);
  foreach ($terms as $term) {
    $variables['resource_type'][] = $term->name;
  }
  $variables['resource_type'] = _get_resource_type();


  // Get total number of resources:
  $view = Views::getView('organization_resources');
  $view->setDisplay('block_2');  // No terms used in this display
  $view->setArguments([$group->id()]);
  $view->execute();
  //$view->serialize();
  //$preview = $view->preview(); //  execute but don't render
  $variables['resource_total'] = $view->total_rows;
}

// we repeatedly need the resource_type variable.
//@ToDo: save a microsecond by caching this
function _get_resource_type() {
  // provide resource_type terms, for tabs in twig
  $vid = 'resource_type';
  $var = [];
  $terms =
    \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid);
  foreach ($terms as $term) {
    $var[] = $term->name;
  }
  return $var;
}

/**
 * Implements hook_form_alter() on behalf of spacebase_core.module.
 */
function spacebase_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if ($form_id == 'user_register_form') {
    $form['actions']['submit']['#submit'][] = 'spacebase_core_user_registration_submit';
  }
  else if ($form['#id'] == 'user-form' ) {
    $form['actions']['submit']['#submit'][] = 'spacebase_core_user_form_submit';
  }
  else if ($form['#id'] == 'group-content-group-content-type-569a59a77cd78-group-join-form' ) {
    $form['actions']['submit']['#submit'][] = 'spacebase_core_organization_join_submit';
  }
  else if ($form_id == 'group_organization_group_add_form') {
    // #show-pin-access #Pins-field-access
    // http://space-base.lndo.site
    //  group/16/content/create/group_node%3Agroup_forum_topic?destination=/group/16
    // look at $form_state;
    // $form_state build_info callback_object entity is a group

  }
  else if ($form['#id'] == 'views-exposed-form-sitewide-search-search') {
    $form['keywords']['#attributes']['placeholder'] = 'Search';
    $path = \Drupal::service('path.current')->getPath();
    $form['#action'] = '/search';
    if (strpos($path, '/search/') === 0) {
      $form['#action'] = $path;
    }
  }
  else if ($form_id == 'node_resources_form') {
    foreach ($form['field_tab']['widget']['#options'] as $tid => $value) {
      //kint($value); // This is an object, being replaced with
      // a string. @ToRefactor, possibly instead use:
      // function hook_options_list_alter
      $term =  \Drupal\taxonomy\Entity\Term::load($tid);
      if ($descrip = $term->getDescription()) {
        $form['field_tab']['widget']['#options'][$tid] =
          $value . " <span class='descrip'>$descrip</span>";
      }
    }
  }


}

/** Submit function to redirect user to profile after edit
 *  Default was to go back to edit page again.
 */
function spacebase_core_user_form_submit(&$form, FormStateInterface $form_state) {
  // An admin might be editing another user, don't use currentUser.
  $id =  $form_state->getFormObject()->getEntity()->id();
  $url = url::fromUserInput("/user/" . $id);
  $form_state->setRedirectUrl($url);
}

/** Submit function to redirect user's to the org after joining.
 *
 * The entity in the form is the membership "group_content"
 * that glues users to groups.
 */
function spacebase_core_organization_join_submit(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $group_content_membership = $form_state->getFormObject()->getEntity();
  $group = $group_content_membership->getGroup();

  // Redirect
  $form_state->setRedirect('entity.group.canonical', ['group' => $group->id()]);

  // And add the role 'verified,' @ToSpec/ToDo unless the $group blocks autoverify
  $group_content_membership->group_roles->setValue('organization_group-verified');
  $group_content_membership->save(); // returns 2, SAVED_UPDATED, if working. Add test?
}


function spacebase_core_user_registration_submit(&$form, FormStateInterface $form_state) {
  drupal_set_message("An email will be sent to you with instructions to verify your email address and complete the sign-up process.");
  $url = url::fromUserInput("/user/login");
  $form_state->setRedirectUrl($url);
}

function spacebase_core_theme($existing, $type, $theme, $path) {
  return [
    'sb_search_page' => [
      'variables' => [
        'keywords' => '',
        'fullpage' => '',
        'orgs' => '',
        'org_count' => '',
        'people' => '',
        'people_count' => '',
      ],
    ],
    // Imitate the forum view with twig-tweak driven variant
    // Have to use underscores
    // What is theme name? What is template?
    'group_resources' => [
      // Seems to work with underscores or dashes.
      'template' => 'grouppageresources',
      'variables' => [
        // loads it twice.
        'resource_type' => [], //_get_resource_type(),
        'group_id' => '',
        'group_links' => []
      ],
    ],
  ];
}
