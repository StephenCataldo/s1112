<?php

/**
 * @file
 * Contains spacebase_core.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\views\Views;
use Drupal\group\Entity\GroupContent;



/**
 * Implements hook_help().
 */
function spacebase_core_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the spacebase_core module.
    case 'help.page.spacebase_core':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Core custom functionality for spacebase website') . '</p>';
      return $output;

    default:
  }
}


/** function _group_from_node($node)
 *
 * Returns the (one) group this node is part of (groups module allows
 * nodes to belong to more than one group â€” we don't.)
 */
function _group_from_node($node) {

  $group_content = array_values(GroupContent::loadByEntity($node))[0];
  return $group_content->getGroup();
}

/**
 * Implements hook_comment_links_alter(),
 *
 * to remove the reply if the user isn't in the group  #131.
 *
 * This fires on node/39#comment-24
 */
function spacebase_core_comment_links_alter(array &$links) {
    $account = \Drupal::currentUser();

    //The reply button is on the node route; comments call it an entity
    if ( $node = \Drupal::routeMatch()->getParameter('node') ) {
    } else {
      //comment/reply/node/52/field_reply/23
      $node = \Drupal::routeMatch()->getParameter('entity');
    }    //comment/reply/node/52/field_reply/23

    $group = _group_from_node($node);
    $variables['parent_groups'][$group->id()] = $group->label();
    // Starting a thread and replying to someone elses, same permissions (now)
    if (!$group->hasPermission('create group_node:group_forum_topic entity', $account)) {
        unset($links['comment']['#links']['comment-reply']);
    }
}

/** Implements hook_preprocess_field_comment
 *
 * Can the current user post comments into this group
 * (Initially, are they a member, but permission based
 * so might change.)
 * This is for the entry box, not the "reply" link
 * #131
 */
function spacebase_core_preprocess_field__comment(&$variables) {
    $account = \Drupal::currentUser();

    // the field is in a node that has a group.
    $node = $variables['element']['#object'];
    $group = _group_from_node($node);
    $variables['parent_groups'][$group->id()] = $group->label();
    // Starting a thread and replying to someone elses, same permissions (now)
    if ($group->hasPermission('create group_node:group_forum_topic entity', $account)) {
        $variables['post_comments_this_group'] = TRUE;
    }
}




/** Implements hook_preprocess_node
 *
 * Link Forum nodes back to their Organization
 * (This could also go in theme if preferred)
 */

function spacebase_core_preprocess_node__group_forum_topic(&$variables) {

  // 1. Forum threads should send people back to either the forum or
  // org page, tbd (by theme tempate).
  // 2. Don't show comments form to non-group members
  // Designed loosely with possible multiple group ownership of forums in mind:
  // 3. Admin pins; others come from views.

  $account = \Drupal::currentUser();
  $show_pin = FALSE; // #show-pin-access will probably change

  $group = _group_from_node($variables['node']);
  $variables['parent_groups'][$group->id()] = $group->label();
    /* elsewhere, right? Test. @ToDo cut if tests ok. */
  $show_reply = FALSE;

  if ($group->hasPermission('create group_node:group_forum_topic entity', $account)) {
    $show_reply = TRUE;
  }
  // Access to pins is tricky, View access means you can see the item is pinned,
  // but don't see that in the places
  // where editors can edit the pins.
  if ($group->hasPermission('organization_group-admin[administer group]', $account)) {
    $show_pin = TRUE;
  }
    _set_the_group_links($variables, $group);  /* only one group, refactor code */

  // 3. Admin pins. Here, and via views, which handle permissions via view fields.
  $node = $variables['node'];
  $variables['admin_links_q']['show_pin'] = $show_pin;
  $variables['admin_links_q']['edit'] = $node->access('update');
  $variables['admin_links_q']['delete'] = $node->access('delete');

}


/** Implements hook_preprocess_page
 *
 * Send the group id to page--org-profile template.
 * This page might be a view (forum, members) or custom (resources)
 * with the gid in the url -- the view can handle these pages directly,
 * or it might be a node from which the group
 * must be extracted.
 *
 * OrgMenuBlock does something similar.
 */
//Just putting this empty function blasts the group profile
//without an error message.
//function spacebase_core_preprocess_page__group_forum_topic(&$variables) {
// fails, block disappears.
function spacebase_core_preprocess_page(&$variables) {
  if (isset($variables['node']) && $variables['node']->getType == 'group_forum_topic') {
    //How is this firing when I try to create a new basic page
    $group = _group_from_node($variables['node']);
    $variables['groupid'] = $group->id();
  }
}



// @ToDo: these use statements from example, probably not all needed:

// Use statements to support hook_entity_field_access.
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Access\AccessResult;

// Interfaces used by entities to declare "ownership".
use Drupal\user\EntityOwnerInterface;
use Drupal\user\UserInterface;

// Use statements for hook_entity_test_access.
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_entity_field_access().
 *
 * #Pins-field-access - Only group Admins can set the pins.
 *
 */

function spacebase_core_entity_field_access($operation, \Drupal\Core\Field\FieldDefinitionInterface $field_definition, \Drupal\Core\Session\AccountInterface $account, \Drupal\Core\Field\FieldItemListInterface $items = NULL) {

  // @ToDo: TestTheAccess by returning here, and making sure it fails in AjaxToggleForm.
  $result = AccessResult::neutral();

  // Caching: unfortunately, group membership means we need to know
  // if this user is an Admin of any groups, so user-specific cache:
  $result->addCacheContexts(['user']);

  // Edit the pin? Matches ability to edit the group (not the node)
  // Forbid access to this field except for admins. Note that the
  // toggle module wants to disable fields that users can view-not-edit ...
  // We want to forbid those fields entirely.
  if ($field_definition->getName() == 'field_pin_to_top') {
    if ($operation == 'update') {
      // 'edit' or  'update' coming from line 256 in ToggleEditableFormatter,
      // which was originally 'edit' but should have been update.


      // Need the node, to get the group, to see if $account is an Admin
      if ($items) {
        $node = $items->getEntity();

        // Get the group, for new or existing nodes.
        $group = '';
        if ($node->isNew()) {
          // Can't loadByEntity a node in the create-new form.
          $group = \Drupal::routeMatch()->getParameter('group');
        } else {
          $group = _group_from_node($node);
        }
        if ($group->hasPermission('organization_group-admin[administer group]', $account)) {
          $result = AccessResult::allowed();
          return $result->addCacheContexts(['user']);
        }
      }
      $result = AccessResult::forbidden();
    }

  }
  return $result;

}

/** Implements template_preprocess_views_view(&$variables)
 *
 * One of a few preprocesses that _set_the_group_links for a template
 */
function spacebase_core_preprocess_views_view(&$variables) {
  if ($variables['id'] == "group_forum" && $variables['display_id'] == 'page_1') {
    $view = $variables['view'];
    $group = Drupal\group\Entity\Group::load($view->args[0]);
    _set_the_group_links($variables, $group);
  }
  if ($variables['id'] == "group_members" && $variables['display_id'] == 'page_1') {
    // Add member link on members page
    $gid = \Drupal::routeMatch()->getParameter('group');
    $group = Drupal\group\Entity\Group::load($gid);
    $account = \Drupal::currentUser();

    if ($group->hasPermission('administer members', $account)) {
      // Don't send classes or text to the themer; send destination.
      $variables['member_add_button'] = '/group/' . $gid .
        '/content/add/group_membership?destination=/group/' . $gid . '/members';
    }
  }
}

/** Implements template_preprocess_views_view_fields(&$variables)
 *
 * One of a few preprocesses that _set_the_group_links for a template
 */
function spacebase_core_preprocess_views_view_fields(&$variables) {
  if ($variables['view']->id() == 'group_profile') {
    // Same as preprocess_views_view. Refactor? @ToDoTrivial
    $view = $variables['view'];
    $group = Drupal\group\Entity\Group::load($view->args[0]);
    _set_the_group_links($variables, $group);
  }
}


/** Implements hook_preprocess_group() on behalf of spacebase_core.module.
 *
 * Prepare theme variables to show links/buttons to join, leave, or create
 * content for groups, or edit groups. A .show boolean and .url
 * Leaves developing link text and classes to theme/twig.
 * Based on both permissions and membership status (can't join a group
 * you already joined) set variables and make url's available to theme.
 */
function spacebase_core_preprocess_group(&$variables) {

  $group = $variables['group'];



  _set_the_group_links($variables, $group);

  // Also, prep the descriptions per term
  // There is vaguely similar code in spacebase.theme

  // Foreach term in the vocab

  // if ($descrip = $term->getDescription()) {

}


/**
 * Implements hook_theme_suggestions_alter().
 *
 * The Org-Profile sub-pages (forum, members, and resources for now)
 * use this page template. So do the group forum nodes.
 */
function spacebase_core_theme_suggestions_page_alter(array &$suggestions, array $variables, $hook) {

  $current_path = \Drupal::service('path.current')->getPath();
  if (preg_match('/group\/\d*\/(forum|members|resources)/',$current_path)) {
    $suggestions[] = 'page__org_profile';
  }
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $content_type = $node->bundle();
    if ($content_type == 'group_forum_topic') {
      //{% include "@mytheme/partials/favicons.html.twig" %}
      $suggestions[] = 'page__org_profile';
    }
  }
}

/** function _set_the_group_links($variables, $group) {
 *
 * A variety of pre-process type functions (specs are still shifting) need
 * to set some variables based on the group.
 *
/** Thoughts on code duplication:

 * The first version of this worked more like the group module's operations
 * link code, which unfortunately is written in a way hard to reuse.
 * I think the new way is simpler, and should be the last step for
 * SpaceBase ...  easier for themers but less extensible.
 *
 * It follows this pattern:
 * $variables['group_links']['group_manage_applicants']
 * The variable is false or the URL, so links can be designed in template.
 *
 * Originally based on:
 * modules/gnode/src/Plugin/GroupContentEnabler/GroupNode.php
 * src/Plugin/GroupContentEnabler/GroupMembership.php
 * Groups module might benefit
 * from a more generalized approach that provides the links so that
 * they can be grabbed by any function, rather than locked into the
 * operations links function. See if as this evolves, something can be
 * contributed back... @ToDo-Later
 */
function _set_the_group_links(&$variables, $group) {

  $current_uri = \Drupal::request()->getRequestUri(); // @ToTest:
  // This is for destinations ... do we want as much path as possible,
  // like pages, when someone comes back after signing up? I think so, test
  // use cases.
  // Previously destination was /group/' . $group->id(); when this was simpler.
  // $url = \Drupal\Core\Url::fromRoute('<current>');

  $account = \Drupal::currentUser(); //or $variables['user']; ?
  // Note: if users can administer a group, all permissions are true.


  /** Group tabs need url repeatedly. Just a shortcut */
  $variables['group_url'] = '/group/' . $group->id();


  /** Edit Group, Add Resource can be done by non-member admins.
   * If not, move inside getMember($account)
   */
  // Edit the group overall
  // /group/x/edit
  if ($group->hasPermission('edit group', $account)) {
    $variables['group_links']['group_edit'] = '/group/' . $group->id() . '/edit';
  }
  if ($group->hasPermission('administer members', $account)) {
    // @ToDo: review cache implications
    $variables['group_links']['group_manage_members'] = '/group/' . $group->id() . '/members';
    // If they can administer members, do they have pending applicants?
    $name = 'group_members';
    $display_id = 'page_2';
    $result = views_get_view_result($name, $display_id, $group->id());
    if ( count($result) > 0 ) {
      $variables['group_links']['group_manage_applicants'] =  '/group/' . $group->id() . '/applicants';
    }
  }

  // Links to add content to a group look like:
  // group/20/content/create/group_node%3Aresources
  // group/14/content/create/group_node%3Agroup_forum_topic
  $ids = array('resources', 'group_forum_topic');
  foreach ($ids as $id) {
    $plugin_id = 'group_node:' . $id;

    if ($group->hasPermission("create $plugin_id entity", $account)) {
      $route_params = ['group' => $group->id(), 'plugin_id' => $plugin_id];
      $url = new Url('entity.group_content.create_form', $route_params);
      /* might remove this for resources, which also have a tab from the form */
      $variables['group_links']['group_create_'. $id] =
        $url->toString() . '?destination=' . $current_uri;
    }
  }

  /* Leave and join depend on membership status AND permission */
  if ($group->getMember($account)) {

    if ($group->hasPermission('leave group', $account)) {
      $url =new Url('entity.group.leave', ['group' => $group->id()]);
      $variables['group_links']['leave'] = $url->toString();
    }
  } elseif ($group->hasPermission('join group', $account)) {
    $url = new Url('entity.group.join', ['group' => $group->id()]);
    $variables['group_links']['join'] = $url->toString();
  }

  // provide resource_type terms, for tabs in twig
  // @ToDo-Refactor replace other times this older version above is called with the new one, I think,
  $variables['resource_type'] = _prep_resources();

  // Get total number of resources:
  $view = Views::getView('organization_resources');
  $view->setDisplay('block_2');  // No terms used in this display
  $view->setArguments([$group->id()]);
  $view->execute();
  $variables['resource_total'] = $view->total_rows;

}

// Get the resource type taxonomy tree names prepped for tabs
// Specs changed, @ToDo replacing this with next one...
function _get_resource_type() {
  // provide resource_type terms, for tabs in twig
  $vid = 'resource_type';
  $var = [];
  $terms =
    \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid);
  foreach ($terms as $term) {
    $var[] = $term->name;
  }
  return $var;
}

// Get the resource type taxonomy tree names & descriptions prepped for tabs
//@ToDo: needed repeatedly - could save almost nothing by caching this
function _prep_resources() {
  $vid = 'resource_type';
  $var = [];
  // in getStorage below,
  // $load_entities defaults to false = faster, not complete objects.
  // This is admin-created data, so treating it as pretty safe markup
  $terms =
    \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid);
  foreach ($terms as $term) {
    $var[] = [
      'name' => $term->name,
      'description' =>  ['#markup' => $term->description__value]
      ];
  }
  return $var;
}




/**
 * Implements hook_form_alter() on behalf of spacebase_core.module.
 */
function spacebase_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if ($form_id == 'user_register_form') {
    $form['actions']['submit']['#submit'][] = 'spacebase_core_user_registration_submit';
  }
  else if ($form['#id'] == 'user-form' ) {
    $form['actions']['submit']['#submit'][] = 'spacebase_core_user_form_submit';
  }
  else if ($form['#id'] == 'group-content-group-content-type-569a59a77cd78-group-join-form' ) {
    $form['actions']['submit']['#submit'][] = 'spacebase_core_organization_join_submit';
  }
  else if ($form['#id'] == 'views-exposed-form-sitewide-search-search') {
    $form['keywords']['#attributes']['placeholder'] = 'Search';
    $path = \Drupal::service('path.current')->getPath();
    $form['#action'] = '/search';
    if (strpos($path, '/search/') === 0) {
      $form['#action'] = $path;
    }
  }
  else if ($form_id == 'node_resources_edit_form' ||
      $form_id == 'node_resources_form') {

    $form['revision_information']['#access'] = FALSE;
    $form['actions']['submit']['#submit'][] = 'spacebase_core_resources_tab_redirect';

    // Add a description to the Resource-type Tabs:
    foreach ($form['field_tab']['widget']['#options'] as $tid => $value) {
      //kint($value); // This is an object, being replaced with
      // a string. @ToRefactor, possibly instead use:
      // function hook_options_list_alter
      $term =  \Drupal\taxonomy\Entity\Term::load($tid);
      if ($descrip = $term->getDescription()) {
        $form['field_tab']['widget']['#options'][$tid] =
          $value . " <span class='descrip'>$descrip</span>";
      }
    }
  }
}

/** Submit function to redirect to resources to specific Tab
 * The resource "Tab" can be set in the form, so destination in link insuff.
 */
function spacebase_core_resources_tab_redirect(&$form, FormStateInterface $form_state) {
  // An admin might be editing another user, don't use currentUser.
  $node = $form_state->getFormObject()->getEntity();
  $group = _group_from_node($node);
  $field_name = $node->field_tab->view()[0]['#title'];
  $field_name = str_replace(' ', '_',$field_name); // or more gen solu?
  $url = url::fromUserInput("/group/" . $group->id() . "/resources/#" . $field_name);
  $form_state->setRedirectUrl($url);

  // Gets rid of destination, which is set for all the new group-related node types
  \Drupal::request()->query->remove('destination');
}


/** Submit function to redirect user to profile after edit
 *  Default was to go back to edit page again.
 */
function spacebase_core_user_form_submit(&$form, FormStateInterface $form_state) {
  // An admin might be editing another user, don't use currentUser.
  $id =  $form_state->getFormObject()->getEntity()->id();
  $url = url::fromUserInput("/user/" . $id);
  $form_state->setRedirectUrl($url);
}

/** Submit function to redirect user's to the org after joining.
 *
 * The entity in the form is the membership "group_content"
 * that glues users to groups.
 */
function spacebase_core_organization_join_submit(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $group_content_membership = $form_state->getFormObject()->getEntity();
  $group = $group_content_membership->getGroup();

  // Redirect
  $form_state->setRedirect('entity.group.canonical', ['group' => $group->id()]);

  // And add the role 'verified,' @ToSpec/ToDo this only if the $group blocks autoverify
  $group_content_membership->group_roles->setValue('organization_group-verified');
  $group_content_membership->save(); // returns 2, SAVED_UPDATED, if working. Add test?
}


function spacebase_core_user_registration_submit(&$form, FormStateInterface $form_state) {
  drupal_get_messages(); // dumps the existing message, use ours...
  drupal_set_message("An email has been sent to you with instructions to verify your email address and complete the sign-up process.");
  $url = url::fromUserInput("/user/login");
  $form_state->setRedirectUrl($url);
}

function spacebase_core_theme($existing, $type, $theme, $path) {
  return [
    'sb_search_page' => [
      'variables' => [
        'keywords' => '',
        'fullpage' => '',
        'orgs' => '',
        'org_count' => '',
        'people' => '',
        'people_count' => '',
      ],
    ],
    // Imitate the forum view with twig-tweak driven variant
    // Have to use underscores
    // What is theme name? What is template?
    'group_resources' => [
      // Seems to work with underscores or dashes.
      'template' => 'org-resources',
      'variables' => [
        'resource_type' => [], //_get_resource_type(),
        'group_id' => '',
        'group_links' => []
      ],
    ],
    'menu_org_profile' => [
      'template' => 'menu_org_profile',
      'variables' => [
        'active' => [],
        'gid' => ''
      ],
    ],
  ];
}


